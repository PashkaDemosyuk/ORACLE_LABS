CREATE TABLE attr_table(
   row1 NUMBER(10) NOT NULL,
   row2 VARCHAR2(100), 
   CONSTRAINT PK_row1 PRIMARY KEY(row1) 
);
  
INSERT INTO attr_table (row1, row2) VALUES (1,'DD1');
INSERT INTO attr_table (row1, row2) VALUES (2,'DD2');
INSERT INTO attr_table (row1, row2) VALUES (3,'DD3');
INSERT INTO attr_table (row1, row2) VALUES (4,'DD4');
INSERT INTO attr_table (row1, row2) VALUES (5,'DD5');
INSERT INTO attr_table (row1, row2) VALUES (6,'DD6');
INSERT INTO attr_table (row1, row2) VALUES (7,'DD7');
INSERT INTO attr_table (row1, row2) VALUES (8,'DD8');
INSERT INTO attr_table (row1, row2) VALUES (9,'DD9');
INSERT INTO attr_table (row1, row2) VALUES (10,'DD10');

SELECT *FROM attr_table;

CREATE OR REPLACE TRIGGER TR_BEFORE_INS_UPD_DEL
BEFORE INSERT OR UPDATE OR DELETE ON attr_table
BEGIN
  DBMS_OUTPUT.PUT_LINE('TR_BEFORE_INS_UPD_DEL');
END;

INSERT INTO attr_table (row1, row2) VALUES (12,'DD12');
INSERT INTO attr_table (row1, row2) VALUES (13,'DD13');

CREATE OR REPLACE TRIGGER TR_BEFORE_INS_UPD_DEL_ROW
  BEFORE INSERT OR UPDATE OR DELETE ON attr_table
  FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      DBMS_OUTPUT.PUT_LINE('TR_BEFORE_INS_UPD_DEL_ROW INSERTING');
    ELSIF UPDATING THEN
      DBMS_OUTPUT.PUT_LINE('TR_BEFORE_INS_UPD_DEL_ROW UPDATING');
    ELSIF DELETING THEN
      DBMS_OUTPUT.PUT_LINE('TR_BEFORE_INS_UPD_DEL_ROW DELETING');
  END IF;
END;

UPDATE attr_table SET row2='DD_UP' WHERE row1>10 and row1<15;

INSERT INTO attr_table (row1, row2) VALUES (15,'DD15');
INSERT INTO attr_table (row1, row2) VALUES (16,'DD16');

CREATE OR REPLACE TRIGGER TR_AFTER_INS_UPD_DEL_ROW 
AFTER INSERT OR UPDATE OR DELETE ON attr_table
  FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      DBMS_OUTPUT.PUT_LINE('TR_AFTER_INS_UPD_DEL_ROW INSERTING');
    ELSIF UPDATING THEN
      DBMS_OUTPUT.PUT_LINE('TR_AFTER_INS_UPD_DEL_ROW UPDATING');
    ELSIF DELETING THEN
      DBMS_OUTPUT.PUT_LINE('TR_AFTER_INS_UPD_DEL_ROW DELETING');
  END IF;
END;

CREATE OR REPLACE TRIGGER TR_AFTER_INS_UPD_DEL
AFTER INSERT OR UPDATE OR DELETE ON attr_table
BEGIN
  DBMS_OUTPUT.PUT_LINE('TR_AFTER_INS_UPD_DEL');
END;

CREATE TABLE AUDIT_(
  OperationDate DATE,
  OperationType VARCHAR2(100),
  TriggerName VARCHAR2(100),
  Data VARCHAR2(200)
);

CREATE OR REPLACE TRIGGER TR_AFTER_INS_UPD_DEL_ROW 
AFTER INSERT OR UPDATE OR DELETE ON attr_table
  FOR EACH ROW
  BEGIN
  IF INSERTING THEN
    DBMS_OUTPUT.PUT_LINE('TR_AFTER_INS_UPD_DEL_ROW INSERTING');
    INSERT INTO AUDIT_ VALUES(sysdate,'inserting','aftertrigger','old: '||to_char(:old.row1));
  ELSIF UPDATING THEN
    DBMS_OUTPUT.PUT_LINE('TR_AFTER_INS_UPD_DEL_ROW UPDATING');
    INSERT INTO AUDIT_ VALUES(sysdate,'updating','aftertrigger','old: '||to_char(:old.row1));
  ELSIF DELETING THEN
    DBMS_OUTPUT.PUT_LINE('TR_AFTER_INS_UPD_DEL_ROW DELETING');
    INSERT INTO AUDIT_ VALUES(sysdate,'deleting','aftertrigger','old: '||to_char(:old.row1));
  END IF;
END;

SELECT * FROM AUDIT_;
SELECT * FROM attr_table;

INSERT INTO attr_table (row1, row2) VALUES (1,'DD1');
INSERT INTO attr_table (row1, row2) VALUES (18,'DD18');
DELETE  attr_table WHERE row1=1;

CREATE OR REPLACE TRIGGER DROP_TR
BEFORE ddl ON SCHEMA
BEGIN
  DBMS_OUTPUT.PUT_LINE('YEAH');
  IF(ora_sysevent='DROP') THEN 
    DBMS_OUTPUT.PUT_LINE('dropping');
    ROLLBACK;
  END IF;
END;

DROP TRIGGER DROP_TR;
FLASHBACK TABLE attr_table TO BEFORE DROP;

DROP TABLE attr_table;

SELECT * FROM attr_table;

create view mynewview
as
select * from attr_table;

CREATE VIEW T_VIEW AS
  SELECT * FROM attr_table;
  
DROP VIEW  T_VIEW;

CREATE OR REPLACE TRIGGER TR_VIEW
  INSTEAD OF INSERT ON T_VIEW
  FOR EACH ROW
  BEGIN
  IF INSERTING THEN DBMS_OUTPUT.PUT_LINE(to_char(:new.row1));
    INSERT INTO attr_table VALUES(:new.row1,:new.row2);
  ELSIF UPDATING THEN DBMS_OUTPUT.PUT_LINE(to_char(:new.row1));
    UPDATE attr_table SET row2='GG';
  ELSIF DELETING THEN DBMS_OUTPUT.PUT_LINE(to_char(:new.row1));
    DELETE attr_table WHERE row2='GG2';
  END IF;
END TR_VIEW;

INSERT INTO T_VIEW  VALUES (35,'kk');

select * from attr_table;
